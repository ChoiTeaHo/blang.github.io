## 미들웨어
: NodeJs Express에서 미들웨어는 app.use(미들웨어 함수)의 기능을 nodeJs로 구축한 어플리케이션을 실행하여 라우팅 될때마다 실행 되는 것을 말한다.

1. 미들웨어 함수를 로드하려면 미들웨어 함수를 지정하여 app.use()를 호출한다.
2. 예를 들면, 다음의 코드는 루트 경로(/)로 라우팅하기 전에 myLogger 미들웨어 함수를 로드한다.

### 기본

```js
const express = require('express');
const app = express();
const PORT = 3000;

// 미들웨어 정의 
var requestTime = function (req, res, next) {
  console.log('미들웨어 발동!');
  req.requestTime = Date.now();
  next();
};

// 미들웨어 호출
app.use(requestTime);

//요청1
app.get('/test1', function(req,res){
    console.log('호출1');
});
//요청2
app.get('/test2', function(req,res){
    console.log('호출2');
});
//요청3
app.post('/test3', function(req,res){
    console.log('호출3');
});

```
  
위 결과는 REST API 요청시 미들웨어가 먼저 실행되는 것을 확인할 수 있다.  
  
```bash
# /test1 호출
미들웨어 발동!
호출1
# /test2 호출
미들웨어 발동!
호출2
# /test3 호출
미들웨어 발동!
호출3

```

### 메소드 사용하기

```js
const express = require('express');
const app = express();  //생성자: 반드시 이렇게 사용해야 에러가 안난다.
const PORT = 3000;
var url = '';

// 미들웨어 정의 
var requestTime = function (req, res, next) {
  console.log('미들웨어 발동!');
  req.requestTime = Date.now();
  next();
};

// 미들웨어 호출
app.use(requestTime);

// 요청
app.get('/', function(req,res) {
    console.log('['+req.requestTime+']'+'app.js >> /'+ '\n');  
});
// 요청
app.get('/favicon.ico', function(req,res){
    console.log('['+req.requestTime+']'+'app.js >> favicon.ico'+ '\n');       
});
// 요청
app.post('/message', function(req,res) {
	console.log('['+req.requestTime+']'+'app.js >> /message'+ '\n');       
});

```
  
미들웨어 메소드를 사용할 수 있게 되었다.
  

```bash
#/요청
미들웨어 발동!
[1679378251419]app.js >> /
#/favicon.ico 요청
미들웨어 발동!
[1679378408535]app.js >> /favicon.ico
#/message 요청
미들웨어 발동!
[1679378408535]app.js >> /message

```
  
모든 요청에 대해 필요할때 사용할 수 있는 공통 메소드가 된듯한 기분이다.
{: .notice--info}



### 라우트 모듈화
**/routes/step1.js**  
```js
const express = require('express');
const router = express.Router();

// 호출시 next 처리 (마치 생성자 같다.)
router.use(function(req, res, next) {
  console.log('라우트 실행..!');
  next();
});

// 라우터체이닝으로 구현
router.get('/', (req, res) => {
    res.send("고객정보조회");
    console.log('고객정보조회');
})
.post('/insert', (req, res) => {
	res.send("신규고객추가");
	console.log('신규고객추가');
})
.put('/update', (req, res) => {
	res.send("고객정보수정");
	console.log('고객정보수정');
})
.delete('/delete', (req, res) => {
	res.send("기존고객삭제");
	console.log('기존고객삭제');
});

module.exports = router;

```
  
  
**app.js**  
```js
const express = require('express');
const app = express();  //생성자: 반드시 이렇게 사용해야 에러가 안난다.
const PORT = 3000;

// 위에서 생성한 라우터 모듈을 정의
const customerRoute = require('./routes/step1');

app.listen(PORT, () => {
	console.log(`Express SERVER START... >> http://localhost:${PORT}`);
});

app.use('/customer', customerRoute);  //미들웨어 호출

```


### 미들웨어 에러처리
NodeJs로 구현한 웹 애플리케이션에 클라이언트가 잘못된 주소에 접근하게되면 404 와 같은 에러 처리를 해주어야 한다. 
모듈을 사용하지 않으면 기본적인 nodejs에서는 url별로 분기처리 코드가 작성된다. express에서는 어떻게 해결해야 할까?
  
Express에서의 에러처리는 코드의 마지막에 에러처리 미들웨어를 작성해주면 된다. 서버에서 해당 주소를 찾다가 마지막까지 없다면
해당 미들웨어를(에러처리) 실행하게 되는 것이다.  


